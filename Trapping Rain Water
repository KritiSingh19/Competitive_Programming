https://leetcode.com/problems/trapping-rain-water/


Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
0 <= n <= 3 * 104
0 <= height[i] <= 105





class Solution {
public:
    int max_left(vector<int>& height, int i){
       int max = height[0];
        for(int j=0; j<i; j++){
            if(max<height[j]){
                max= height[j];
            }
        }
        return max;  
    }
    
    int max_right(vector<int>& height, int i){
       int max = height[height.size()-1];
        for(int j=i+1; j<height.size(); j++){
            if(max<height[j]){
                max= height[j];
            }
        }
        return max;  
    }
    
    int minimum(int left, int right){
        if(left<right){
            return left;
        }
        else{
            return right;
        }
    }
    
    int trap(vector<int>& height) {
        if(height.size()==0){
            return 0;
        }
        int left, right, m, sum=0, h;
        for(int i=1; i<height.size()-1; i++){
            left= max_left(height, i);
            right= max_right(height, i);
            m=minimum(left,right);
            h=m-height[i];
               if(h<=0){
                sum=sum+0;
                }
               else{
                sum=sum+h;
               }
            }      
            
        
      return sum;  
    }
};
